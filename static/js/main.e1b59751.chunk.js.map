{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/utils/functions.tsx","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","API_URL","getMovie","query","fetch","then","res","json","normalizeMovieData","movieData","Poster","Title","Plot","imdbID","FindMovie","setSearchQuery","addMovie","useState","setMovie","responseError","setResponseError","hasLoadingError","setHasLoadingError","isLoaded","setIsLoaded","reset","findMovie","searchQuery","a","movieDataFromServer","newMovie","onSubmit","event","preventDefault","htmlFor","type","id","placeholder","value","onChange","target","classNames","disabled","length","onClick","App","setMovies","some","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e1b59751.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst accessKey = '92182745';\nconst API_URL = `https://www.omdbapi.com/?apikey=${accessKey}`;\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json());\n}\n","import { MovieData } from '../../types/MovieData';\nimport { ResponseError } from '../../types/ReponseError';\nimport { Movie } from '../../types/Movie';\n\nexport const isResponseOk = (response: MovieData | ResponseError) => {\n  if ('Error' in response) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const normalizeMovieData = (movieData: MovieData) => {\n  const {\n    Poster: imgUrl,\n    Title: title,\n    Plot: description,\n    imdbID: imdbId,\n  } = movieData;\n\n  const imdbUrl = `https://www.imdb.com/title/${imdbId}`;\n\n  const movie: Movie = {\n    imgUrl,\n    title,\n    description,\n    imdbId,\n    imdbUrl,\n  };\n\n  if (movie.imgUrl === 'N/A') {\n    movie.imgUrl = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n  }\n\n  return movie;\n};\n","import React, { ChangeEvent, FormEvent, useState } from 'react';\nimport classNames from 'classnames';\nimport { getMovie } from '../../api';\nimport { MovieData } from '../../types/MovieData';\nimport './FindMovie.scss';\nimport { MovieCard } from '../MovieCard';\nimport { isResponseOk, normalizeMovieData } from '../utils/functions';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  query: string;\n  setSearchQuery: (value: string) => void;\n  addMovie: (movie: Movie) => void;\n};\n\nexport const FindMovie: React.FC<Props> = (\n  {\n    query,\n    setSearchQuery,\n    addMovie,\n  },\n) => {\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [responseError, setResponseError]\n    = useState(false);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(true);\n\n  const reset = () => {\n    setResponseError(false);\n    setHasLoadingError(false);\n  };\n\n  const changeQuery = (event: ChangeEvent<HTMLInputElement>) => {\n    reset();\n\n    const { value } = event.target;\n\n    setSearchQuery(value);\n  };\n\n  const findMovie = async (searchQuery: string) => {\n    try {\n      setIsLoaded(false);\n\n      const movieDataFromServer = await getMovie(searchQuery);\n\n      if (isResponseOk(movieDataFromServer)) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const newMovie = normalizeMovieData(movieDataFromServer as MovieData);\n\n        setMovie(newMovie);\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        setResponseError(true);\n      }\n    } catch {\n      setHasLoadingError(true);\n    } finally {\n      setIsLoaded(true);\n    }\n  };\n\n  const handleAddButtonClick = () => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    addMovie(movie!);\n    setMovie(null);\n    setSearchQuery('');\n    reset();\n  };\n\n  const onFindButtonClick = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    findMovie(query);\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={onFindButtonClick}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={query}\n              onChange={changeQuery}\n            />\n          </div>\n\n          {responseError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n\n          {hasLoadingError && (\n            <p className=\"help is-danger\">\n              Can&apos;t load data from server\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames(\n                'button is-light',\n                {\n                  'is-loading': !isLoaded,\n                },\n              )}\n              disabled={query.length === 0}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            {movie && (\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => handleAddButtonClick()}\n              >\n                Add to the list\n              </button>\n            )}\n          </div>\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          {/* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */}\n          <MovieCard movie={movie!} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const addMovie = (newMovie: Movie) => {\n    if (!movies.some(movie => movie.imdbId === newMovie.imdbId)) {\n      setMovies(currentMovies => [...currentMovies, newMovie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          query={searchQuery}\n          setSearchQuery={setSearchQuery}\n          addMovie={addMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}